{"is_source_file": true, "format": "Python", "description": "This file defines a FastAPI backend module for interacting with Google's Generative AI service (Gemini). It includes configurations, error classes, and an asynchronous function to fetch AI-generated answers based on user questions, with proper error handling and timeout support.", "external_files": ["../deps"], "external_methods": ["genai.configure", "genai.GenerativeModel", "genai.generate_content", "asyncio.get_event_loop", "asyncio.wait_for"], "published": ["get_answer"], "classes": [{"name": "GeminiConfigurationError", "description": "Raised when Gemini configuration is invalid, such as missing API key."}, {"name": "GeminiUpstreamError", "description": "Raised when an error occurs during interaction with the Gemini API."}], "methods": [{"name": "_get_model()", "description": "Creates and returns a GenerativeModel instance based on current settings.", "scope": "", "scopeKind": ""}, {"name": "Tuple[str,str] get_answer(question: str, timeout: float = 30.0)", "description": "Asynchronously fetches an answer from Google Gemini AI for a given question, with specified timeout.", "scope": "", "scopeKind": ""}, {"name": "_generate_with_timeout()", "scope": "get_answer", "scopeKind": "function", "description": "unavailable"}], "calls": ["genai.configure", "genai.GenerativeModel", "genai.generate_content", "asyncio.get_event_loop", "asyncio.wait_for", "logger.exception", "logger.error"], "search-terms": ["GeminiAI", "get_answer", "Google Generative AI", "async timeout", "model creation", "API key validation"], "state": 2, "file_id": 12, "knowledge_revision": 53, "git_revision": "1a6632f9645a19420bc79329fe420afcfb2849e4", "revision_history": [{"40": ""}, {"53": "1a6632f9645a19420bc79329fe420afcfb2849e4"}], "ctags": [{"_type": "tag", "name": "GeminiConfigurationError", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^class GeminiConfigurationError(ValueError):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "GeminiUpstreamError", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^class GeminiUpstreamError(RuntimeError):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_generate_with_timeout", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^        async def _generate_with_timeout():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "get_answer", "scopeKind": "function"}, {"_type": "tag", "name": "_get_model", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^def _get_model():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "genai", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^import google.generativeai as genai$/", "language": "Python", "kind": "namespace", "nameref": "module:google.generativeai"}, {"_type": "tag", "name": "get_answer", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^async def get_answer(question: str, timeout: float = 30.0) -> Tuple[str, str]:$/", "language": "Python", "typeref": "typename:Tuple[str,str]", "kind": "function", "signature": "(question: str, timeout: float = 30.0)"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/ai-copilot-assistant-4345-4354/fastapi_backend/src/api/routers/gemini_client.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}], "hash": "98ef88ef3fb8ed968be93cb343a9bba3", "format-version": 4, "code-base-name": "fastapi_backend", "filename": "fastapi_backend/src/api/routers/gemini_client.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}